import streamlit as st
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score 
import matplotlib.pyplot as plt

# Загрузка датасета
cancer = load_breast_cancer()
X = cancer.data  #массив признаков
y = cancer.target #массив целевых знвчений

# Разделение на тренировочный и тестовый наборы
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)

# Определение гиперпараметров
st.sidebar.header("Гиперпараметры")
criterion = st.sidebar.selectbox('Критерий', ('gini', 'entropy'))
max_depth = st.sidebar.slider('Максимальная глубина дерева', min_value=1, max_value=10)
min_samples_leaf = st.sidebar.slider('Минимальное количество примеров в листе', min_value=1, max_value=20)

# Обучение модели
model = DecisionTreeClassifier(criterion=criterion,
                               max_depth=max_depth,
                               min_samples_leaf=min_samples_leaf)
model.fit(X_train, y_train)

# Прогнозирование
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

# Отображение результатов
st.write(f'**Точность модели:** {accuracy:.2f}')

# Графическое представление данных
fig, ax = plt.subplots(figsize=(6, 4))
ax.scatter(X_train[:, 0], X_train[:, 1], c=y_train, s=50, cmap='viridis')
ax.set_xlabel('Средний радиус')
ax.set_ylabel('Средняя текстура')
ax.set_title('Диагностические данные рака груди')
st.pyplot(fig)

# Пример данных с 30 признаками
new_data = [
    [17.99, 10.38, 123.8, 17.77, 1325.0, 0.1184, 0.2776, 0.3001, 0.1471, 0.2419, 0.07871, 1.095, 0.9053, 8.589, 153.4, 0.006399, 0.04904, 0.05373, 0.01587, 0.03003, 0.006193, 25.38, 17.33, 184.6, 2019.0, 0.1622, 0.6656, 0.7119, 0.2654, 0.4601]
]

prediction = model.predict(new_data)[0]
st.write(f'**Предсказанный диагноз:** {"Доброкачественная" if prediction == 0 else "Злокачественная"}')


"""Этот код решает задачу бинарной классификации, используя дерево решений для предсказания злокачественности опухоли молочной железы. Вот пошаговая разбивка того, как он работает:

Шаг 1: Загрузка и подготовка данных
Код загружает датасет о раке молочной железы (load_breast_cancer), который предоставляет набор признаков (например, размер опухоли, текстуру клеток и другие характеристики). Далее происходит разделение данных на обучающую и тестовую выборки с помощью функции train_test_split.

Шаг 2: Настройка гиперпараметров
Пользователь может настраивать гиперпараметры модели через интерфейс Streamlit:

criterion: критерий разделения узлов дерева (Gini или Entropy).
max_depth: максимальная глубина дерева, которая ограничивает сложность модели.
min_samples_leaf: минимальное количество образцов в каждом листе дерева, которое помогает избежать переобучения.
Шаг 3: Обучение модели
После настройки гиперпараметров модель обучается на обучающей выборке с использованием метода fit. В результате создается дерево решений, которое использует признаки для классификации новых случаев.

Шаг 4: Оценка точности модели
На этапе тестирования модель делает прогнозы для тестовой выборки и вычисляется точность с помощью метрики accuracy_score, которая сравнивает реальные значения с предсказанными.

Шаг 5: Визуализация данных
Для визуализации используется библиотека Matplotlib. На графике отображаются два признака (средний радиус и средняя текстура), а точки окрашены в разные цвета в зависимости от их класса (доброкачественные/злокачественные).

Шаг 6: Предсказание для нового примера
В конце кода предоставляется новый пример данных (в виде списка из 30 признаков), и модель делает прогноз относительно этого случая, определяя, является ли опухоль доброкачественной или злокачественной.

Таким образом, данный код демонстрирует полный цикл работы с моделью машинного обучения для задачи классификации: загрузку данных, обучение модели, оценку ее качества и применение к новым данным."""